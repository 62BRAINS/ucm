<?php

defined( '_UCM_VERSION' ) || die( '-5' );

// (slowly) moving everything over to better OOP classes:


if ( class_exists( 'UCMBaseDocument' ) ) {

	class UCMJob extends UCMBaseDocument {

		public $db_id = 'job_id';
		public $db_table = 'job';
		public $display_key = 'name';
		public $display_name = 'Job';
		public $display_name_plural = 'Jobs';
		public $db_fields = array();
		public $document_type = 'job'; // quote, invoice

		private static $jobinstances = array();

		static function singleton( $id ) {
			if ( $id ) {
				if ( ! isset( self::$jobinstances[ $id ] ) ) {
					self::$jobinstances[ $id ] = new static( $id );
				}

				return self::$jobinstances[ $id ];
			}

			return new static();
		}

		public function find_duplicate_numbers() {
			$other_jobs = new UCMJobs();
			$rows       = $other_jobs->get( array( 'name' => $this->get( 'name' ) ) );
			foreach ( $rows as $row_id => $row ) {
				if ( $row[ $this->db_id ] === $this->id ) {
					unset( $rows[ $row_id ] );
				}
			}

			return $rows;
		}

		public function get_task( $task_id ) {
			return new UCMJobTask( $this, $task_id );

		}


		public function link_public( $h = false ) {
			if ( $h ) {
				return md5( 's3cret7hash for job ' . _UCM_SECRET . ' ' . $this->id );
			}

			return full_link( _EXTERNAL_TUNNEL_REWRITE . 'm.job/h.public/i.' . $this->id . '/hash.' . $this->link_public( true ) );
		}

	}

	class UCMJobs extends UCMBaseMulti {

		public $db_id = 'job_id';
		public $db_table = 'job';
		public $display_name = 'Job';
		public $display_name_plural = 'Jobs';


	}

	class UCMJobTask extends UCMBaseTask {

		public $document_type = 'job'; // quote, job, invoice
		public $db_id = 'task_id';
		public $db_table = 'task';
		public $display_key = 'description';
		public $display_name = 'Job Task';
		public $display_name_plural = 'Jobs';
		public $db_fields = array();
		public $document = false;

		public function sql_load( $id = false ) {
			$id  = (int) $id;
			$sql = 'SELECT t.*, t.task_id AS id, i.invoice_item_id AS invoiced, i.invoice_id AS invoice_id ';
			$sql .= ", SUM(tl.hours) AS `completed` ";
			$sql .= ", inv.name AS invoice_number";
			$sql .= ", u.name AS user_name";
			$sql .= ", j.name AS job_name";
			$sql .= ", j.default_task_type";
			$sql .= ', j.user_id AS job_user_id FROM `' . _DB_PREFIX . $this->db_table . '` t ';
			$sql .= " LEFT JOIN `" . _DB_PREFIX . "task_log` tl ON t.task_id = tl.task_id";
			$sql .= " LEFT JOIN `" . _DB_PREFIX . "invoice_item` i ON t.task_id = i.task_id ";
			$sql .= " LEFT JOIN `" . _DB_PREFIX . "invoice` inv ON i.invoice_id = inv.invoice_id ";
			$sql .= " LEFT JOIN `" . _DB_PREFIX . "user` u ON t.user_id = u.user_id ";
			$sql .= " LEFT JOIN `" . _DB_PREFIX . "job` j ON t.job_id = j.job_id";
			$sql .= ' WHERE t.`' . $this->db_id . '` = :id';
			$sql .= ' AND t.`job_id` = :job_id';
			$this->db->bind_param( 'id', $id );
			$this->db->bind_param( 'job_id', $this->document->get( 'job_id' ) );

			return $sql;
		}

		public function link_open( $full = false, $link_options = array() ) {
			if ( $this->id ) {
				$link_options = array(
					'full'      => $full,
					'type'      => $this->db_table,
					'module'    => 'job',
					'page'      => 'job_admin_task_edit',
					'arguments' => array(
						'job_id'     => $this->document ? $this->document->job_id : 0,
						$this->db_id => $this->id
					),
					'data'      => $this->db_details,
					'text'      => $this->db_details[ $this->display_key ]
				);
			} else {
				$link_options = array(
					'full'      => $full,
					'type'      => $this->db_table,
					'module'    => 'job',
					'page'      => 'job_admin_task_edit',
					'arguments' => array(
						'job_id'     => $this->document ? $this->document->job_id : 0,
						$this->db_id => 'new'
					),
					'data'      => array(),
					'text'      => $this->display_name
				);
			}

			return link_generate( array( $link_options ) );
		}

		public function get_fieldset_data() {

			$fieldset_data                   = parent::get_fieldset_data();
			$fieldset_data['extra_settings'] = array(
				'owner_table' => $this->db_table,
				'owner_key'   => $this->db_id,
				'owner_id'    => $this->id,
				'layout'      => 'table_row',
				'allow_new'   => module_extra::can_i( 'create', 'Job Tasks' ),
				'allow_edit'  => module_extra::can_i( 'create', 'Job Tasks' ),
			);

			return $fieldset_data;
		}

		public function delete_children() {
			if ( $this->id && $this->document->get( $this->db_id ) ) {
				$sql = "DELETE FROM `" . _DB_PREFIX . "task_log` WHERE task_id = '" . (int) $this->id . "'";
				query( $sql );
			}
			parent::delete_children(); // TODO: Change the autogenerated stub
		}

		public function is_task_invoiced() {
			return $this->get( 'invoiced' ) ? $this->get( 'invoice_id' ) : false;
		}

		public function handle_submit() {
			if ( module_job::can_i( 'edit', 'Job Tasks' ) && module_form::check_secure_key() ) {

				$task_id = isset( $_POST['task_id'] ) ? (int) $_POST['task_id'] : false;
				$job_id  = isset( $_POST['job_id'] ) ? (int) $_POST['job_id'] : false;

				if ( $job_id && $task_id ) {
					$this->document = new UCMJob( $job_id );
					$this->load( $task_id );

					if ( $this->id && $this->get( 'job_id' ) == $job_id ) {


						$success = true;
						$message = 'Job Task saved successfully';


						if ( isset( $_REQUEST['butt_del_task'] ) && $_REQUEST['butt_del_task'] && module_product::can_i( 'delete', 'Job Tasks' ) ) {
							if ( $this->is_task_invoiced() ) {
								$message = 'Cannot delete Invoiced task';
								$success = false;
							} else {
								$this->delete_with_confirm( false, $this->document->link_open() );
							}
						} else {

							$this->save_data( $_POST );

							// process the old actions copied over from job.php in save_job_tasks();

							$job_task_creation_permissions = module_job::get_job_task_creation_permissions();

							module_job::update_job_completion_status( $job_id );
						}

						if ( ! empty( $_POST['x_ucm_ajax'] ) ) {
							// saving successfully via ajax form.
							// send back json so we know how to handle it.
							header( "Content-type: application/json" );
							$return = array(
								'status' => $success,
								'data'   => array(
									'job_id'   => $job_id,
									'task_id'  => $task_id,
									'message'  => $message,
									'redirect' => $this->document->link_open(),
								)
							);
							echo json_encode( $return );
							exit;
						}

						set_message( $message );
						$return = $this->document->link_open();
						redirect_browser( $return );
					}
				}
			}
		}


	}


}